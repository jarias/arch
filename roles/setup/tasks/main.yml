---
- name: install default packages
  community.general.pacman:
    name: "{{ packages + host_packages }}"
    update_cache: true
  become:
    true

    #- name: install AUR packages
    #  community.general.pacman:
    #    name: "{{ aur_packages + host_aur_packages }}"
    #    state: present
    #    executable: yay
    #  tags: [aur]

- name: clone dotfiles repo
  ansible.builtin.git:
    repo: https://github.com/jarias/dotfiles.git
    dest: /home/{{ username }}/.dotfiles
    bare: true
  tags: [dotfiles]

- name: config dotfiles repo
  community.general.git_config:
    name: status.showUntrackedFiles
    repo: /home/{{ username }}/.dotfiles
    scope: local
    value: "no"
  tags: [dotfiles]

- name: create GTK themes folder
  ansible.builtin.file:
    path: /home/{{ username }}/.themes
    state: directory
    recurse: true

- name: install Dracula GTK theme
  ansible.builtin.git:
    repo: https://github.com/dracula/gtk.git
    dest: /home/{{ username }}/.themes/Dracula

- name: install volta
  ansible.builtin.shell: |
    curl https://get.volta.sh | bash

- name: install NodeJS via volta
  ansible.builtin.shell: |
    /home/{{ username}}/.volta/bin/volta install node

- name: create zsh plugins folder
  ansible.builtin.file:
    path: /home/{{ username }}/.zsh/plugins
    state: directory

- name: clone zsh-history-substring-search
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-history-substring-search.git
    dest: /home/{{ username }}/.zsh/plugins/zsh-history-substring-search

- name: clone nvchad
  ansible.builtin.git:
    repo: https://github.com/NvChad/NvChad
    dest: /home/{{ username }}/.config/nvim
    depth: 1

- name: create ~/.local/bin folder
  ansible.builtin.file:
    path: /home/{{ username }}/.local/bin
    state: directory
    recurse: true

- name: create tarsnap script
  template:
    src: templates/tarsnap/tarsnap.sh.j2
    dest: /home/{{ username }}/.local/bin/tarsnap.sh
    mode: 0755
  tags: [tarsnap]

- name: copy password-store-sync.sh
  ansible.builtin.copy:
    src: password-store/password-store-sync.sh
    dest: /home/{{ username }}/.local/bin/password-store-sync.sh
    mode: 0755

- name: copy volume-set.sh
  ansible.builtin.copy:
    src: audio/volume-set.sh
    dest: /home/{{ username }}/.local/bin/volume-set.sh
    mode: 0755

- name: copy change-audio-output.sh
  ansible.builtin.copy:
    src: audio/change-audio-output.sh
    dest: /home/{{ username }}/.local/bin/change-audio-output.sh
    mode: 0755

- name: create systemd user folder
  ansible.builtin.file:
    path: /home/{{ username }}/.config/systemd/user
    state: directory
    recurse: true

- name: copy systemd user files
  ansible.builtin.copy:
    src: "{{ item.path }}/{{ item.name }}"
    dest: /home/{{ username }}/.config/systemd/user/{{ item.name }}
  with_items:
    - { path: dunst, name: dunst.service }
    - { path: udiskie, name: udiskie.service }
    - { path: flameshot, name: flameshot.service }
    - { path: password-store, name: password-store-sync.service }
    - { path: password-store, name: password-store-sync.timer }
    - { path: tarsnap, name: tarsnap.timer }
    - { path: tarsnap, name: tarsnap.service }
  tags: [systemd]

- name: enable systemd user services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    daemon_reload: true
    scope: user
  with_items: "{{ systemd_user_services + host_systemd_user_services }}"
  tags: [systemd]

- name: enable systemd services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    daemon_reload: true
  become: true
  with_items:
    - lightdm.service
    - pcscd.service
    - bluetooth.service
  tags: [systemd]

- name: kernel modules
  ansible.builtin.copy:
    src: "{{ item }}/{{ item }}.conf"
    dest: /etc/modules-load.d/{{ item }}.conf
  become: true
  with_items: "{{ kernel_modules + host_kernel_modules }}"
  tags: [kernel_modules]

- name: kernel modules options
  ansible.builtin.copy:
    src: "{{ item }}/{{ item }}-options.conf"
    dest: /etc/modprobe.d/{{ item }}.conf
  become: true
  with_items: "{{ kernel_modules + host_kernel_modules }}"
  tags: [kernel_modules]

- name: copy xorg config
  ansible.builtin.copy:
    src: "xorg/{{ item }}-{{ hostname }}.conf"
    dest: /etc/X11/xorg.conf.d/{{ item }}.conf
    mode: 0644
    owner: root
    group: root
  with_items:
    - 20-gpu
    - 10-monitor
    - 99-libinput-custom-config
  become: true
  tags: [xorg]
